name: Build and deploy project to EC2
on:
  # TODO: remove after testing
  push:
    branches:
      - test/*
      - main
  pull_request:
    branches:
      - development
env:
  BUILD_ARTIFACT_NAME: buildArtifact
  ENV_ARTIFACT_NAME: envArtifact
  NODE_VERSION: 20
  EC2_USER: "ec2-user"
  EC2_HOST: "ec2-13-201-66-137.ap-south-1.compute.amazonaws.com"
  PROJECT_DIR: "/home/ec2-user/project"
  SSH_KEY_PATH: "~/.ssh/id_rsa"
  AWS_SECRETS_NAME: "dev/teampulse/actions_secrets"
  APP_ENTRY_POINT: "main.js"
  CLEANUP_SCRIPT: "cleanup.sh"
  CREATE_PATH_SCRIPT: "create_path.sh"
  DEPLOY_SCRIPT: "deploy.sh"
jobs:
  upload:
      runs-on: ubuntu-latest
  
      steps:
        - uses: actions/checkout@v3
        - name: Setup JFrog CLI
          uses: jfrog/setup-jfrog-cli@v4
          with:
            version: latest
          env:
            JF_URL: ${{ secrets.JFROG_URL }}
            JF_ACCESS_TOKEN: ${{ secrets.JFROG_TOKEN }}
        - name: Upload artifact
          run: jf rt u "dist/*.zip" my-repo/path/
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version:  ${{ env.NODE_VERSION }}
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-deps-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Get env artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.ENV_ARTIFACT_NAME }}
      - name: Verify .env files
        run: ls -l
      - name: Move env to config
        run: sudo mv dev.env ./config/dev.env
      - name: Run build
        run: npm run build
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BUILD_ARTIFACT_NAME }}
          path: dist
  upload-to-jfrog:
    needs: 
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.BUILD_ARTIFACT_NAME }}

      - name: Output content
        run: ls

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        with:
          version: latest
        env:
          JF_URL: ${{ secrets.JFROG_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JFROG_TOKEN }}

      - name: Upload artifact
        run: jf rt u "dist/*.zip" artifactory-build-info
